import requests
from telebot import types

from api import *
from auth_register import users
from auth_register.validators import password_validator, phone_validator, email_validator
from bot import bot
from auth_register.users import users_dict, get_password, get_username
from menu.menu import handle_menu


def handle_change_creds(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    change_email_button = types.InlineKeyboardButton('üìß –°–º–µ–Ω–∏—Ç—å Email', callback_data='change_email')
    change_phone_button = types.InlineKeyboardButton('‚òéÔ∏è –°–º–µ–Ω–∏—Ç—å –¢–µ–ª–µ—Ñ–æ–Ω', callback_data='change_phone')
    change_password_button = types.InlineKeyboardButton('üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data='change_password')
    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ ', callback_data='change_go_back')
    markup.add(change_email_button, change_phone_button, change_password_button, back_button)

    hello_message = """
        <b> –°–º–µ–Ω–∞ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>

üíª –í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π Email, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!


    """

    bot.send_message(message.chat.id, hello_message, reply_markup=markup, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data.startswith('change_'))
def process_register_step(callback):
    chat_id = callback.message.chat.id
    if callback.data == "change_email":
        if not users.is_possible_input:
            return
        else:
            users.is_possible_input = False
        bot.send_message(chat_id, "üìß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
        bot.register_next_step_handler(callback.message, process_email_change)
    elif callback.data == "change_phone":
        if not users.is_possible_input:
            return
        else:
            users.is_possible_input = False
        bot.send_message(chat_id, "‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(callback.message, process_phone_change)
    elif callback.data == "change_password":
        if not users.is_possible_input:
            return
        else:
            users.is_possible_input = False
        bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å!")
        bot.register_next_step_handler(callback.message, process_password_change)
    elif callback.data == "change_go_back":
        handle_menu(callback.message)
    else:
        return


def process_password_change(message):
    chat_id = message.chat.id
    password1 = message.text

    if not password_validator(password1):
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π.\n –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã, —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ "
                                  "–ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã, –∞ —Ç–∞–∫–∂–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
        bot.register_next_step_handler(message, process_password_change)
        return

    bot.send_message(chat_id, "üîë –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å!")

    def retype_new_password(message):
        password2 = message.text

        if password1 != password2:
            bot.send_message(chat_id, "–ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å!")
            bot.register_next_step_handler(message, process_password_change)
            return

        body = {
            "password1": password1,
            "password2": password2,
        }

        resp = requests.post(API_AUTH_CHANGE_PASSWORD, data=body,
                             auth=(get_username(chat_id), get_password(chat_id)))
        if resp.status_code == 200:
            users_dict[chat_id]["password"] = password1
            bot.send_message(chat_id, "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!")
            users.is_possible_input = True

            handle_menu(message)
        else:
            return

    bot.register_next_step_handler(message, retype_new_password)


def process_phone_change(message):
    chat_id = message.chat.id
    phone = message.text
    is_valid, formatted_phone = phone_validator(phone)
    if not is_valid:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
        bot.register_next_step_handler(message, process_phone_change)
        return

    body = {
        "phone": formatted_phone,
    }

    resp = requests.post(API_AUTH_CHANGE_PHONE, data=body,
                         auth=(get_username(chat_id), get_password(chat_id)))
    if resp.status_code == 200:
        users_dict[chat_id]["phone"] = formatted_phone
        bot.send_message(chat_id, "–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!")
        users.is_possible_input = True

        handle_menu(message)
    else:
        return


def process_email_change(message):
    chat_id = message.chat.id

    email = message.text
    if not email_validator(email):
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–≤–µ–¥—ë–Ω–Ω—ã–π Email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π Email")
        bot.register_next_step_handler(message, process_email_change)
        return

    body = {
        "email": email,
    }
    resp = requests.post(API_AUTH_CHANGE_EMAIL, data=body,
                         auth=(get_username(chat_id), get_password(chat_id)))

    if resp.status_code == 200:
        users_dict[chat_id]["email"] = email
        bot.send_message(chat_id, "Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!")
        users.is_possible_input = True

        handle_menu(message)
    else:
        return
