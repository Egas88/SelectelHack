import requests
from telebot import types

from auth_register import users
from auth_register.users import users_dict
from bot import bot
from auth_register.validators import password_validator, email_validator, phone_validator
from api import *
from menu.menu import handle_menu

cur_user_data = {}


def handle_register(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup(row_width=1)
    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ ', callback_data='back_start')
    markup.add(back_button)

    msg_txt = """

    ‚úèÔ∏è  –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è!

    """

    bot.send_message(chat_id, msg_txt, reply_markup=markup, parse_mode="HTML")

    bot.register_next_step_handler(message, process_name_step)


def process_name_step(message):
    cur_user_data["name"] = message.text
    markup = types.InlineKeyboardMarkup(row_width=1)
    email_btn = types.InlineKeyboardButton('üìß –ü–æ Email', callback_data="register_email")
    phone_btn = types.InlineKeyboardButton('‚òéÔ∏è –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data="register_phone")
    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ ', callback_data='back_start')

    markup.add(email_btn, phone_btn, back_button)

    if users.additional_input:
        users.additional_input = True
        bot.send_message(message.chat.id, """<b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ </b> """, reply_markup=markup, parse_mode="HTML")
    else:
        return

@bot.callback_query_handler(func=lambda call: call.data.startswith('register_'))
def process_register_step(callback):
    chat_id = callback.message.chat.id
    if callback.data == "register_email":
        if not users.additional_input:
            return
        else:
            users.additional_input = False
        bot.send_message(chat_id, "‚úèÔ∏è  –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email")
        bot.register_next_step_handler(callback.message, process_email_step)
    elif callback.data == "register_phone":
        if not users.additional_input:
            return
        else:
            users.additional_input = False
        bot.send_message(chat_id, "‚úèÔ∏è  –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        bot.register_next_step_handler(callback.message, process_phone_step)
    else:
        return


def process_email_step(message):
    chat_id = message.chat.id
    users.additional_input = True

    email = message.text
    if not email_validator(email):
        bot.send_message(chat_id, "‚ùó –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à Email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π Email")
        bot.register_next_step_handler(message, process_email_step)
        return
    cur_user_data["email"] = message.text

    if users.additional_input:
        users.additional_input = False
        bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –í–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", disable_web_page_preview=True)
    else:
        return

    bot.register_next_step_handler(message, process_password_step, "email")


def process_phone_step(message):
    chat_id = message.chat.id
    users.additional_input = True

    phone = message.text
    is_valid, formatted_phone = phone_validator(phone)
    if not is_valid:
        bot.send_message(chat_id, "‚ùó –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
        bot.register_next_step_handler(message, process_phone_step)
        return

    cur_user_data["phone"] = formatted_phone
    if users.additional_input:
        users.additional_input = False
        bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –í–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", disable_web_page_preview=True)
    else:
        return
    bot.register_next_step_handler(message, process_password_step, "phone")


def process_password_step(message, reg_type):
    chat_id = message.chat.id
    password = message.text
    if not password_validator(password):
        msg_txt = """
                <b> ‚ùó –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º </b>
                
üìè –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 8 —Å–∏–º–≤–æ–ª–æ–≤

üî§ –¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã, —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, –∞ —Ç–∞–∫–∂–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã

                """
        bot.send_message(message.chat.id, msg_txt, parse_mode="HTML")

        bot.register_next_step_handler(message, process_password_step, reg_type)
        return

    cur_user_data["password"] = message.text

    if reg_type == "phone":
        bot.send_message(chat_id, "‚úîÔ∏è –ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –±—ã–ª–æ –≤—ã—Å–ª–∞—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –°–ú–° –∫–æ–¥–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ –¥–ª—è "
                                  "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        body = {
            "phone": cur_user_data["phone"],
            "password": cur_user_data["password"],
            "first_name": cur_user_data["name"],
            "tag": "string"
        }

    elif reg_type == "email":
        bot.send_message(chat_id, "‚úîÔ∏è –ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π Email –±—ã–ª–æ –≤—ã—Å–ª–∞—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ –¥–ª—è "
                                  "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        body = {
            "email": cur_user_data["email"],
            "password": cur_user_data["password"],
            "first_name": cur_user_data["name"],
            "tag": "string"
        }

    else:
        return

    resp = requests.post(API_AUTH_REGISTRATION, data=body)
    if resp.status_code == 200:
        cur_user_data["user_id"] = resp.json()["user_id"]
        bot.register_next_step_handler(message, process_confirm_reg, reg_type)
    else:
        return


def process_confirm_reg(message, reg_type):
    chat_id = message.chat.id
    code = message.text

    body = {
        "code": code,
        "user_id": cur_user_data["user_id"],
        reg_type: cur_user_data["email"] if "email" in cur_user_data else cur_user_data["phone"]
    }

    if reg_type == "email":
        resp = requests.post(API_AUTH_CONFIRM_EMAIL_REG, data=body)
    elif reg_type == "phone":
        resp = requests.post(API_AUTH_CONFIRM_PHONE_REG, data=body)
    else:
        return

    if resp.status_code == 200:
        cur_user_data["username"] = cur_user_data["email"] if "email" in cur_user_data else cur_user_data["phone"]
        bot.send_message(chat_id, "‚úîÔ∏è –í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        users_dict[message.chat.id] = cur_user_data
        users.additional_input = True
        users.is_reg = False
        users.is_possible_input = True
        handle_menu(message)

    else:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥—ë–Ω–Ω—ã–π –í–∞–º–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –µ—â—ë —Ä–∞–∑!")
        bot.register_next_step_handler(message, process_confirm_reg, reg_type)
