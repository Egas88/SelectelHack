import requests
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import calendar
import datetime
from bot import bot
from api import API_REGIONS, API_CITIES, API_BLOOD_STATIONS, API_DONATION_PLAN
from auth_register.users import get_username, get_password
from notification_manager.notifications import add_notification_on_donation_plan
from menu.menu import handle_menu


blood_types = {"blood": "–¶–µ–ª—å–Ω–∞—è –∫—Ä–æ–≤—å", "plasma": "–ü–ª–∞–∑–º–∞", "platelets": "–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã", "erythrocytes": "–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã", "leukocytes": "–ì—Ä–∞–Ω—É–ª–æ—Ü–∏—Ç—ã"}
request_data = {}
months = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]
displayed_data = {}

def handle_donation_planning(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–¶–µ–ª—å–Ω–∞—è –∫—Ä–æ–≤—å", callback_data="donation_planning_blood_type-blood"), InlineKeyboardButton("–ü–ª–∞–∑–º–∞", callback_data="donation_planning_blood_type-plasma"))
    markup.row(InlineKeyboardButton("–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã", callback_data="donation_planning_blood_type-platelets"), InlineKeyboardButton("–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã", callback_data="donation_planning_blood_type-erythrocytes"))
    markup.row(InlineKeyboardButton("–ì—Ä–∞–Ω—É–ª–æ—Ü–∏—Ç—ã", callback_data="donation_planning_blood_type-leukocytes"))
    markup.row(InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ', callback_data='change_go_back'))
    bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text="ü©∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–æ–≤–∏:", 
        reply_markup=markup
    )


def choose_payment_type(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    free = types.InlineKeyboardButton("–ë–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ", callback_data="donation_planning_payment_type-free")
    payed = types.InlineKeyboardButton("–ü–ª–∞—Ç–Ω–æ", callback_data="donation_planning_payment_type-payed")
    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ', callback_data='change_go_back')
    markup.add(free, payed, back_button)
    bot.edit_message_text(
        chat_id=message.chat.id, 
        message_id=message.message_id, 
        text = """
        <b>ü§≤ –ë–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ </b>
–ü–∏—Ç–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è
(5% –ú–†–û–¢ –ø–æ—Ä—è–¥–∫–∞ 700-1500 ‚ÇΩ. –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–≤–∞–Ω–∏—è –ü–æ—á–µ—Ç–Ω–æ–≥–æ –¥–æ–Ω–æ—Ä–∞.)

<b>üíµ –ü–ª–∞—Ç–Ω–æ </b>
–î–µ–Ω—å–≥–∏ –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–≤–∞–Ω–∏—è –ø–æ—á–µ—Ç–Ω–æ–≥–æ –¥–æ–Ω–æ—Ä–∞

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–Ω–∞—Ü–∏–∏: 

    """, 
        reply_markup=markup,
        parse_mode="HTML",
    )


def choose_is_out(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    false = types.InlineKeyboardButton("–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π –ø—É–Ω–∫—Ç", callback_data="donation_planning_is_out-false")
    true = types.InlineKeyboardButton("–í—ã–µ–∑–¥–Ω–∞—è –∞–∫—Ü–∏—è", callback_data="donation_planning_is_out-true")
    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ', callback_data='change_go_back')
    markup.add(false, true, back_button)
    bot.edit_message_text(
        chat_id=message.chat.id, 
        message_id=message.message_id, 
        text = """
<b>üè• –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä—ã–π –ø—É–Ω–∫—Ç </b>
–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ

<b>üöê –í—ã–µ–∑–¥–Ω–∞—è –∞–∫—Ü–∏—è</b>
–î–µ–Ω—å –¥–æ–Ω–æ—Ä–∞, –≤—ã–µ–∑–¥—ã –≤ –í–£–ó—ã, –ø–µ—Ä–µ–¥–≤–∏–∂–Ω—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ –±—Ä–∏–≥–∞–¥—ã

–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Å–¥–∞—á–∏: 

    """, 
        reply_markup=markup,
        parse_mode="HTML",
    )


def create_regions_markup(page = 1, per_page = 10):
    responce = requests.get(f"{API_REGIONS}", params={"country": "1"}).json()
    responce = responce["results"]
    markup = InlineKeyboardMarkup()
    total_pages = len(responce) // per_page + (1 if len(responce) % per_page > 0 else 0)
    start = (page - 1) * per_page
    end = start + per_page
    for region in responce[start:end]:
        markup.add(InlineKeyboardButton(region["title"], callback_data=f"donation_planning_region-{region['id']}"))
    
    row = []
    if page > 1:
        row.append(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'donation_planning_region_page-{page-1}'))
    if page < total_pages:
        row.append(InlineKeyboardButton('‚û°Ô∏è', callback_data=f'donation_planning_region_page-{page+1}'))
    if row:
        markup.row(*row)

    markup.row(InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='change_go_back'))
    return markup


def create_cities_markup(region_id, page = 1, per_page = 10):
    responce = requests.get(f"{API_CITIES}", params={"country": "1", "region": f"{region_id}"}).json()
    responce = responce["results"]
    markup = InlineKeyboardMarkup()
    total_pages = len(responce) // per_page + (1 if len(responce) % per_page > 0 else 0)
    start = (page - 1) * per_page
    end = start + per_page
    for city in responce[start:end]:
        markup.add(InlineKeyboardButton(city["title"], callback_data=f"donation_planning_region_city-{city['id']}"))
    
    row = []
    if page > 1:
        row.append(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'donation_planning_region_city_page-{region_id}-{page-1}'))
    if page < total_pages:
        row.append(InlineKeyboardButton('‚û°Ô∏è', callback_data=f'donation_planning_region_city_page-{region_id}-{page+1}'))
    if row:
        markup.row(*row)
    
    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω–∞–º", callback_data="donation_planning_region_back_to_regions"))
    markup.row(InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ', callback_data='change_go_back'))
    return markup


def choose_region(message):
    markup = create_regions_markup()
    bot.edit_message_text(
        chat_id=message.chat.id, 
        message_id=message.message_id, 
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω: ",
        reply_markup=markup
    )


def create_blood_stations_markup(page = 1, per_page = 10):
    responce = requests.get(f"{API_BLOOD_STATIONS}", params={"city_id": f"{request_data['city_id']}"}).json()
    responce = responce["results"]
    markup = InlineKeyboardMarkup()
    total_pages = len(responce) // per_page + (1 if len(responce) % per_page > 0 else 0)
    start = (page - 1) * per_page
    end = start + per_page
    for station in responce[start:end]:
        markup.add(InlineKeyboardButton(station["title"], callback_data=f"donation_planning_blood_station-{station['id']}"))
    
    row = []
    if page > 1:
        row.append(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'donation_planning_blood_station_page-{page-1}'))
    if page < total_pages:
        row.append(InlineKeyboardButton('‚û°Ô∏è', callback_data=f'donation_planning_blood_station_page-{page+1}'))
    if row:
        markup.row(*row)
    
    markup.row(InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ', callback_data='change_go_back'))

    return markup


def choose_blood_station(message):
    markup = create_blood_stations_markup()
    bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏: ",
        reply_markup=markup
    )


def choose_is_need(message):
    markup = types.InlineKeyboardMarkup()
    send = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="donation_planning_send-true")
    change = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="donation_planning_send-false")
    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ', callback_data='change_go_back')
    markup.add(send, change, back_button)
    bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text=f"""
–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

<b>ü©∏–¢–∏–ø –∫—Ä–æ–≤–∏</b>
{displayed_data["blood_type"]}

<b>–î–∞—Ç–∞</b>
{displayed_data["plan_date"]}

<b>üíµ–¢–∏–ø –¥–æ–Ω–∞—Ü–∏–∏</b>
{displayed_data["payment_type"]}

<b>üöê–ú–µ—Å—Ç–æ —Å–¥–∞—á–∏</b>
{displayed_data["is_out"]}

<b>üè•–ì–æ—Ä–æ–¥</b>
{displayed_data["city"]}

{f'''<b>üíâ–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏</b>
{displayed_data["blood_station"]}''' if displayed_data["is_out"] == "false" else ""}
""",
        reply_markup=markup,
        parse_mode="HTML"
    )


def create_notification_message():
    return f"""–ù–∞–ø–æ–º–Ω–∞–µ–º –≤–∞–º –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ–Ω–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è {f'''–≤ {displayed_data["blood_station"]}''' if displayed_data["is_out"] == "false" else ""}"""


# –î–∞–ª—å—à–µ –±–æ–≥–∞ –Ω–µ—Ç, —Ç—É—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–∏—Å—Ç–æ
def create_calendar(year, month):
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton(f"{months[month-1]} {year}", callback_data=f"donation_planning_select_year-{month}-{year}"))
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    row = [InlineKeyboardButton(day, callback_data='ignore') for day in days]
    markup.row(*row)

    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data='ignore'))
            else:
                row.append(InlineKeyboardButton(str(day), callback_data=f"donation_planning_data-{year}-{str(month).zfill(2)}-{str(day).zfill(2)}-{str(day).zfill(2)}.{str(month).zfill(2)}.{year}"))
        markup.row(*row)
    markup.row(InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ', callback_data='change_go_back'))
    return markup


def create_month_year_selection(year, month):
    markup = InlineKeyboardMarkup()
    year_row = []
    year_row.append(InlineKeyboardButton("<<", callback_data=f"donation_planning_year-{year-1}"))
    year_row.append(InlineKeyboardButton(f"{year}", callback_data="ignore"))
    year_row.append(InlineKeyboardButton(">>", callback_data=f"donation_planning_year-{year+1}"))
    markup.row(*year_row)
    
    for i in range(1, 13):
        month_button = InlineKeyboardButton(months[i-1], callback_data=f"donation_planning_select_month-{i}-{year}")
        if i % 3 == 1:
            month_row = []
        month_row.append(month_button)
        if i % 3 == 0:
            markup.row(*month_row)

    return markup


def get_calendar(message):
    now = datetime.datetime.now()
    markup = create_calendar(now.year, now.month)
    bot.edit_message_text(
        chat_id=message.chat.id, 
        message_id=message.message_id, 
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", 
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('donation_planning_blood_type'))
def select_blood_type(call: CallbackQuery):
        blood_type = call.data.split('-')[1]
        request_data["blood_class"] = blood_type
        displayed_data["blood_type"] = blood_types[blood_type]
        message = call.message
        get_calendar(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('donation_planning_data'))
def data_select(call: CallbackQuery):
    if datetime.datetime.now().date() > datetime.datetime(year=int(call.data.split('-')[1]), month=int(call.data.split('-')[2]), day=int(call.data.split('-')[3])).date():
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ, —á–µ–º —Å–µ–≥–æ–¥–Ω—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
            reply_markup=create_calendar(datetime.datetime.now().year, datetime.datetime.now().month),
        )
    else:
        request_data["plan_date"] = call.data.split('-')[1] + "-" + call.data.split('-')[2] + "-" + call.data.split('-')[3]
        date = call.data.split('-')[4]
        displayed_data["plan_date"] = date
        message = call.message
        choose_payment_type(message)



@bot.callback_query_handler(func=lambda call: call.data.startswith('donation_planning_select'))
def select_month(call: CallbackQuery):
    if call.data.startswith("donation_planning_select_year"):
        month = int(call.data.split('-')[1])
        year = int(call.data.split('-')[2])
        markup = create_month_year_selection(year, month)
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    elif call.data.startswith("donation_planning_select_month"):
        month = int(call.data.split('-')[1])
        year = int(call.data.split('-')[2])
        markup = create_calendar(year, month)
        bot.edit_message_text(f"–í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü: {months[month-1]}", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('donation_planning_year'))
def select_year(call: CallbackQuery):
    year = int(call.data.split('-')[1])
    now = datetime.datetime.now()
    markup = create_month_year_selection(year, now.month)
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('donation_planning_payment_type'))
def select_payment_type(call: CallbackQuery):
    payment_type = call.data.split('-')[1]
    request_data["payment_type"] = payment_type
    if payment_type == "free":
        displayed_data["payment_type"] = "–ë–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ"
    else:
        displayed_data["payment_type"] = "–ü–ª–∞—Ç–Ω–æ"
    message = call.message
    choose_is_out(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('donation_planning_is_out'))
def select_is_out(call: CallbackQuery):
    is_out = call.data.split('-')[1]
    request_data["is_out"] = is_out
    if is_out == "true":
        displayed_data["is_out"] = "–í—ã–µ–∑–¥–Ω–∞—è –∞–∫—Ü–∏—è"
    elif is_out == "false":
        displayed_data["is_out"] = "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π –ø—É–Ω–∫—Ç"
    message = call.message
    choose_region(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('donation_planning_region'))
def select_region(call: CallbackQuery):
    if call.data.startswith("donation_planning_region_page"):
        page = int(call.data.split('-')[1])
        markup = create_regions_markup(page=page)
        bot.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω: ", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    elif call.data.startswith("donation_planning_region-"):
        region_id = call.data.split('-')[1]
        markup = create_cities_markup(region_id)
        bot.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥: ", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    elif call.data.startswith("donation_planning_region_city_page"):
        region_id = call.data.split('-')[1]
        page = int(call.data.split('-')[2])
        markup = create_cities_markup(region_id, page=page)
        bot.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥: ", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    elif call.data.startswith("donation_planning_region_city-"):
        city_id = call.data.split('-')[1]
        request_data["city_id"] = city_id
        displayed_data["city"] = requests.get(f"{API_CITIES}{city_id}/").json()["title"]
        message = call.message
        if request_data["is_out"] == "true":
            choose_is_need(message)
        else:
            choose_blood_station(message)
    elif call.data.startswith("donation_planning_region_back_to_regions"):
        markup = create_regions_markup()
        bot.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω: ", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('donation_planning_blood_station'))
def select_blood_station(call: CallbackQuery):
    if call.data.startswith("donation_planning_blood_station_page"):
        page = int(call.data.split('-')[1])
        markup = create_blood_stations_markup(page=page)
        bot.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏: ", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    elif call.data.startswith("donation_planning_blood_station-"):
        blood_station_id = call.data.split('-')[1]
        request_data["blood_station_id"] = blood_station_id
        displayed_data["blood_station"] = requests.get(f"{API_BLOOD_STATIONS}{blood_station_id}/").json()["title"]
        message = call.message
        choose_is_need(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('donation_planning_send'))
def select_send_or_change(call: CallbackQuery):
    is_send = call.data.split('-')[1]
    if is_send == "true":
        request_data["status"] = "active"
        responce = requests.post(API_DONATION_PLAN, json=request_data, auth=(get_username(call.message.chat.id), get_password(call.message.chat.id)))
        add_notification_on_donation_plan(call.message.chat.id, request_data["date"], create_notification_message())
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        )
        bot.send_message(
            chat_id=call.message.chat.id,
            text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        )
        handle_menu(call.message)
    elif is_send == "false":
        handle_donation_planning(call.message)
