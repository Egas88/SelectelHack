from telebot import types
from telebot.types import InputMediaPhoto
import requests

from auth_register import users
from auth_register.change_creds.change_creds import handle_change_creds

from blood_station.blood_station import handle_blood_stations_list, handle_bs_need
from bot import bot
from donation.donation import handle_donation_adding
from donation.donation_planning import handle_donation_planning
from donation.guide import handle_blood_donation_guide
from donation.get_donations import handle_see_donations
from events.events import handle_events


def handle_donations_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    add_donation_button = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ü–∏—é', callback_data='sub_menu_add_donation')
    plan_donation_button = types.InlineKeyboardButton('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ–Ω–∞—Ü–∏—é', callback_data='sub_menu_plan_donation')
    see_planned_donations_button = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ü–∏–∏', callback_data='sub_menu_see_planned_donations')
    see_donations_button = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ü–∏–∏', callback_data='sub_menu_see_donations')
    blood_donation_guide_button = types.InlineKeyboardButton('–ü–∞–º—è—Ç–∫–∞ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏', callback_data='sub_menu_blood_donation_guide')

    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ ', callback_data='change_go_back')
    msg_txt = """
    <b> –î–æ–Ω–∞—Ü–∏–∏ üíâ </b>
    
ü©∏ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–Ω–∞—Ü–∏—é. 

üìÉ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç–∫—É –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–¥–∞—á–µ –∫—Ä–æ–≤–∏! 

    """
    markup.add(add_donation_button, see_donations_button , plan_donation_button, see_planned_donations_button, blood_donation_guide_button, back_button)
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.send_message(chat_id=message.chat.id, text = msg_txt, reply_markup=markup, parse_mode="HTML")

def handle_blood_centers_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    blood_stations_button = types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Ü–µ–Ω—Ç—Ä–æ–≤ –∫—Ä–æ–≤–∏',
                                                       callback_data='sub_menu_blood_stations')
    address_needs_button = types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–¥—Ä–µ—Å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏',
                                                      callback_data='sub_menu_address_needs')
    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ ', callback_data='change_go_back')
    msg_txt = """
ü©∏ <b>–¶–µ–Ω—Ç—Ä—ã –∫—Ä–æ–≤–∏</b>
    
üó∫Ô∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–≤ –∫—Ä–æ–≤–∏. 

üìç  –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∑–∂–∞–π—à–∏—Ç–π –∫ –í–∞–º —Ü–µ–Ω—Ç—Ä! 

    """
    markup.add(blood_stations_button, address_needs_button, back_button)
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.send_message(message.chat.id, msg_txt, reply_markup=markup, parse_mode="HTML")


def handle_gamification_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=1)

    top_status_button = types.InlineKeyboardButton('–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–æ–ø–µ',
                                                   callback_data='sub_menu_game_status')
    games_projects_button = types.InlineKeyboardButton('–ò–≥—Ä—ã –∏ —Å–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç—ã', callback_data='sub_menu_games_projects')
    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ ', callback_data='change_go_back')

    msg_txt = """
    <b> –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è üïπÔ∏è </b>
    
üé≤ –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π —Å—Ç–∞—É—Ç—Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏!

üì∞ –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–µ–π—à–∏—Ö —Å–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –∏–≥—Ä–∞—Ö! 

    """
    markup.add(top_status_button, games_projects_button, back_button)
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.send_message(message.chat.id, msg_txt, reply_markup=markup, parse_mode="HTML")



def handle_personal_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=1)

    donate_button = types.InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—É', callback_data='sub_menu_donate')
    change_personal = types.InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', callback_data='sub_menu_change_personal')
    honorary_donor_button = types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ –ø–æ—á–µ—Ç–Ω–æ–≥–æ –¥–æ–Ω–æ—Ä–∞',
                                                       callback_data='sub_menu_honorary_donor')
    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ ', callback_data='change_go_back')
    msg_txt = """
    <b>‚öôÔ∏è –õ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>
    
üíµ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –∏ —Å–¥–µ–ª–∞–π—Ç–µ –º–∏—Ä –ª—É—á—à–µ

‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

üèÜ –°—Ç–∞–Ω—å—Ç–µ –ø–æ—á–µ—Ç–Ω—ã–º –¥–æ–Ω–æ—Ä–æ–º! 

    """
    markup.add(donate_button, change_personal, honorary_donor_button, back_button)
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.send_message(message.chat.id, msg_txt, reply_markup=markup, parse_mode="HTML")


def handle_articles_menu(message):
    users.is_aricles = True
    markup = types.InlineKeyboardMarkup(row_width=1)
    guide_link = types.InlineKeyboardButton('üìú –í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ',
                                            url="https://journal.donorsearch.org/")
    back_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ ', callback_data='change_go_back')
    last_news = get_last_news()
    keys = list(last_news.keys())
    values = list(last_news.values())

    if len(last_news) < 4:
        return
    msg_txt = f"""
üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ 
‚≠ê {keys[0]}
‚≠ê {keys[1]}
‚≠ê {keys[2]}
‚≠ê {keys[3]}
        
üíâ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∏ –Ω–æ–≤–µ–π—à–∏—Ö –æ—Ç–∫—Ä—ã—Ç–∏—è—Ö –≤ –º–∏—Ä–µ –º–µ–¥–∏—Ü–∏–Ω—ã –∏ –≥–µ–º–∞—Ç–æ–ª–æ–≥–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Ä–µ—Å—É—Ä—Å! 

        """

    markup.add(guide_link, back_button)
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    #bot.send_message(message.chat.id, msg_txt, reply_markup=markup, parse_mode="HTML")
    media_group = []
    first = True
    for img in values:
        photo_response = requests.get(img).content
        if first:
            first = False
            media_group.append(InputMediaPhoto(photo_response, caption=msg_txt))
        else:
            media_group.append(InputMediaPhoto(photo_response))

    message_to_save = bot.send_media_group(message.chat.id, media=media_group)
    users.old_man_pic_delete_message = message_to_save
    bot.send_message(message.chat.id, "–ò–∑—É—á–∏—Ç—å —ç—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ", reply_markup=markup, parse_mode="HTML")

def get_last_news():
    from bs4 import BeautifulSoup

    url = 'https://journal.donorsearch.org/'
    response = requests.get(url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        h3_tags_class_h2 = soup.find_all('h3', class_='t-entry-title h2')
        h3_tags_class_h4 = soup.find_all('h3', class_='t-entry-title h4')

        news = []

        for tag in h3_tags_class_h2:
            news.append(tag.text.strip())

        for tag in h3_tags_class_h4:
            news.append(tag.text.strip())

        news_guid_mapping = {}

        div_tags_class_async_done = soup.find_all('div', class_='t-background-cover adaptive-async')
        for i, tag in enumerate(div_tags_class_async_done):
            data_guid = tag.get('data-guid')
            news_guid_mapping[news[i]] = data_guid

        return news_guid_mapping





@bot.callback_query_handler(func=lambda call: call.data.startswith('sub_menu_'))
def process_register_step(callback):
    if callback.data == "sub_menu_add_donation":
        handle_donation_adding(callback.message)
    elif callback.data == "sub_menu_plan_donation":
        handle_donation_planning(callback.message)
    elif callback.data == "sub_menu_see_planned_donations":
        handle_see_donations(callback.message, True)
    elif callback.data == "sub_menu_see_donations":
        handle_see_donations(callback.message, False)
    elif callback.data == "sub_menu_blood_donation_guide":
        handle_blood_donation_guide(callback.message)
    elif callback.data == "sub_menu_blood_stations":
        handle_blood_stations_list(callback.message)
    elif callback.data == "sub_menu_address_needs":
        handle_bs_need(callback.message)
    elif callback.data == "sub_menu_game_status":
        pass
    elif callback.data == "sub_menu_games_projects":
        handle_events(callback.message)
    elif callback.data == "sub_menu_donate":
        pass
    elif callback.data == "sub_menu_change_personal":
        handle_change_creds(callback.message)
    elif callback.data == "sub_menu_honorary_donor":
        pass
    else:
        return
